package pt.ist.socialsoftware.edition.domain;

enum pt.ist.socialsoftware.edition.domain.Source.SourceType as SourceType;
enum pt.ist.socialsoftware.edition.domain.ManuscriptSource.Medium as Medium;
enum pt.ist.socialsoftware.edition.domain.ManuscriptSource.Form as Form;
enum pt.ist.socialsoftware.edition.domain.ManuscriptSource.Material as Material;
enum pt.ist.socialsoftware.edition.domain.SpaceText.SpaceDim as SpaceDim;
enum pt.ist.socialsoftware.edition.domain.SpaceText.SpaceUnit as SpaceUnit;
enum pt.ist.socialsoftware.edition.domain.Rend.Rendition as Rendition;
enum pt.ist.socialsoftware.edition.domain.AddText.Place as Place;
enum pt.ist.socialsoftware.edition.domain.DelText.HowDel as HowDel;
enum pt.ist.socialsoftware.edition.domain.TextPortion.VariationType as VariationType;
enum pt.ist.socialsoftware.edition.domain.GapText.GapUnit as GapUnit;
enum pt.ist.socialsoftware.edition.domain.GapText.GapReason as GapReason;
enum pt.ist.socialsoftware.edition.domain.UnclearText.UnclearReason as UnclearReason;
enum pt.ist.socialsoftware.edition.domain.AltText.AltMode as AltMode;
enum pt.ist.socialsoftware.edition.domain.NoteText.NoteType as NoteType;
enum pt.ist.socialsoftware.edition.domain.RefText.RefType as RefType;
enum pt.ist.socialsoftware.edition.domain.Category.CategoryType as CategoryType;
enum pt.ist.socialsoftware.edition.domain.Tag.TagType as TagType;
enum pt.ist.socialsoftware.edition.domain.Fragment.PrecisionType as PrecisionType;

class LdoD {
	String title;
	String author;
	String editor;
	String sponsor;
	String principal;
	String funder;
}

relation DomainRootHasLdoDApplication {
	.pt.ist.fenixframework.DomainRoot playsRole root {
		multiplicity 1..1;
	}
	LdoD playsRole ldoD {
		multiplicity 0..1;
	}
}

class LdoDUser {
	String username;
	String password;
	String firstName;
	String lastName;
	String email;
}

relation LdoDHasLdoDUsers {
	LdoD playsRole ldoD {multiplicity 1..1;}
	LdoDUser playsRole users {multiplicity 0..*;}
}

class Role {
	String rolename;
}

relation LdoDHasRoles {
	LdoD playsRole ldoD {multiplicity 1..1;}
	Role playsRole roles {multiplicity 0..*;}
}

relation LdoDUsersAndRoles {
	LdoDUser playsRole users {multiplicity 0..*;}
	Role playsRole roles {multiplicity 0..*;}
}

class Edition {
	String xmlId;
	String title;
	LocalDate date;
	String acronym;
}

class ExpertEdition extends Edition {
	String author;
	String editor;
}

class VirtualEdition extends Edition {
	Boolean pub;
}

class NullEdition extends Edition;

relation VirtualEditionUsesEdition {
	VirtualEdition playsRole isUsedBy {multiplicity 0..*;}
	Edition playsRole uses {multiplicity 0..1;}
}

relation LdoDHasExpertEditions {
	LdoD playsRole ldoD4Expert {multiplicity 1..1;}
	ExpertEdition playsRole expertEditions {multiplicity 0..*;}
}

relation LdoDHasNullEdition {
	LdoD playsRole ldoD4NullEdition {multiplicity 1..1;}
	NullEdition playsRole nullEdition {multiplicity 0..1;}
}

relation LdoDHasVirtualEditions {
	LdoD playsRole ldoD4Virtual {multiplicity 1..1;}
	VirtualEdition playsRole virtualEditions {multiplicity 0..*;}
}

relation LdoDUserParticipatesVirtualEditions {
	LdoDUser playsRole participant {multiplicity 0..*;}
	VirtualEdition playsRole myVirtualEditions {multiplicity 0..*;}
}

relation LdoDUserSelectsVirtualEditions {
	LdoDUser playsRole selectedBy {multiplicity 0..*;}
	VirtualEdition playsRole selectedVirtualEditions {multiplicity 0..*;}
}

class Taxonomy {
	String xmlId;
	String name;
	boolean adHoc;
	int numTopics;
	int numWords;
	int thresholdCategories;
	int numIterations;
}

relation LdoDHasTaxonomies {
	LdoD playsRole ldoD {multiplicity 1..1;}
	Taxonomy playsRole taxonomies {multiplicity 0..*;}
}

relation EditionHasTaxonomies {
	Edition playsRole edition {multiplicity 0..1;}
	Taxonomy playsRole taxonomies {multiplicity 0..*;}
}

class Category {
	CategoryType type;
	String xmlId;
	String name;
	boolean deprecated;
}

relation TaxonomyHasCategories {
	Taxonomy playsRole taxonomy {multiplicity 1..1;}
	Category playsRole categories {multiplicity 0..*;}
}

class GeneratedCategory extends Category;

class AdHocCategory extends Category;

class MergeCategory extends Category;

relation MergeCategoryHasCategories {
	MergeCategory playsRole mergeCategory {multiplicity 0..1;}
	Category playsRole mergedCategories {multiplicity 2..*;}
}

class SplitCategory extends Category;

relation SplitCategoryToCategory {
	SplitCategory playsRole splitCategory {multiplicity 0..2;}
	Category playsRole originSplitCategory {multiplicity 1..1;}
}

class FragWord {
	String word;
}

relation TaxonomyHasFragWord {
	Taxonomy playsRole taxonomy {multiplicity 1..1;}
	FragWord playsRole fragWord {multiplicity 0..*;}
}


class FragWordInCategory {
	int weight;
}

relation FragWordInCategory2GeneratedCategory {
	FragWordInCategory playsRole fragWordInCategory {multiplicity 0..*;}
	GeneratedCategory playsRole generatedCategory {multiplicity 1..1;}
}

relation FragWordInCategory2FragWord {
	FragWordInCategory playsRole fragWordInCategory {multiplicity 0..*;}
	FragWord playsRole fragWord {multiplicity 1..1;}
}

class Heteronym {
	String xmlId;
	String name;
}

class NullHeteronym extends Heteronym;

relation LdoDHasHeteronyms {
	LdoD playsRole ldoD {multiplicity 1..1;}
	Heteronym playsRole heteronyms {multiplicity 0..*;}
}

class Fragment {
	String xmlId;
	String title;
}

relation LdoDHasFragments {
	LdoD playsRole ldoD {multiplicity 1..1;}
	Fragment playsRole fragments {multiplicity 0..*;}
}

class FragInter {
	String xmlId;
	LocalDate date;
	PrecisionType precision;
	int numAnnexNotes;
}

relation FragmentHasFragInters {
	Fragment playsRole fragment {multiplicity 1..1;}
	FragInter playsRole fragmentInter {multiplicity 0..*;}
}

relation FragInterAttributesHeronym {
	FragInter playsRole fragInter {multiplicity 0..*;}
	Heteronym playsRole heteronym {multiplicity 0..1;}
}

class AnnexNote {
	int number;
}

relation FragInterHasAnnexNote {
	FragInter playsRole fragInter {multiplicity 1..1;}
	AnnexNote playsRole annexNote {multiplicity 0..*;}
}

class Tag {
	TagType type;
	boolean deprecated;
}

relation Tag2Category {
	Tag playsRole tag {multiplicity 0..*;}
	Category playsRole category {multiplicity 1..1;}
}

relation Tag2FragInter {
	Tag playsRole tag {multiplicity 0..*;}
	FragInter playsRole fragInter {multiplicity 1..1;}
}

class GeneratedTagInFragInter extends Tag {
	int percentage;
}

class UserTag extends Tag;

class UserTagInTextPortion extends UserTag;

class UserTagInFragInter extends UserTag;

relation UserTagInFragInterHasContributor {
	UserTagInFragInter playsRole userTagInFragInter {multiplicity 0..*;}
	LdoDUser playsRole contributor {multiplicity 0..1;}
}

relation UserTagInFragInterHidesTag {
	UserTagInFragInter playsRole userTagInFragInter {multiplicity 0..1;}
	Tag playsRole originTag {multiplicity 0..1;}
}

class MergeTag extends Tag;

relation MergeTagMergesTags {
	MergeTag playsRole mergeTag {multiplicity 0..1;}
	Tag playsRole mergedTags {multiplicity 2..*;}
}

class MergeTagInTextPortion extends MergeTag;

class MergeTagInFragInter extends MergeTag;

class SplitTag extends Tag;

relation SplitTagToTag {
	SplitTag playsRole splitTag {multiplicity 0..1;}
	Tag playsRole originSplitTag {multiplicity 1..1;}
}

class SplitTagInTextPortion extends SplitTag;

class SplitTagInFragInter extends SplitTag;

class ExpertEditionInter extends FragInter {
	String title;
	String volume;
	int number;
	int startPage;
	int endPage;
	String notes;
}

class VirtualEditionInter extends FragInter {
	int number;
}

relation VirtualEditionInterUsesFragInter {
	VirtualEditionInter playsRole isUsedBy {multiplicity 0..*;}
	FragInter playsRole uses {multiplicity 1..1;}
}

class SourceInter extends FragInter;

relation ExpertEditionHasExpertEditionInters {
	ExpertEdition playsRole expertEdition {multiplicity 1..1;}
	ExpertEditionInter playsRole expertEditionInters {multiplicity 0..*;}
}

class Source {
	String xmlId;
	SourceType type;
}

relation FragmentHasSources {
	Fragment playsRole fragment {multiplicity 1..1;}
	Source playsRole sources {multiplicity 0..*;}
}

relation SourceHasSourceInters {
	Source playsRole source {multiplicity 1..1;}
	SourceInter playsRole sourceInters {multiplicity 0..*;}
}

class ManuscriptSource extends Source {
	String settlement;
	String repository;
	String idno;
	String altIdentifier;
	Form form;
	Material material;
	int columns;
	Boolean hasLdoDLabel;
	String notes;
	LocalDate date;
	PrecisionType precision;
}

class PhysNote {
	Medium medium;
	String note;
}

class HandNote extends PhysNote;

class TypeNote extends PhysNote;

relation ManuscriptSourceHasHandNote {
	ManuscriptSource playsRole manuscript {multiplicity 1..1;}
	HandNote playsRole handNote {multiplicity 0..*;}
}

relation ManuscriptSourceHasTypeNote {
	ManuscriptSource playsRole manuscript {multiplicity 1..1;}
	TypeNote playsRole typeNote {multiplicity 0..*;}
}

class PrintedSource extends Source {
	String title;
	String pubPlace;
	String issue;
	LocalDate date;
	PrecisionType precision;
}

class Facsimile {
	String xmlId;
}

relation SourceHasFacsimile {
	Source playsRole source {multiplicity 1..1;}
	Facsimile playsRole facsimile {multiplicity 0..1;}
}

class Surface {
	String xmlId;
	String graphic;
}

relation FacsimileHasSurface {
	Facsimile playsRole facsimile {multiplicity 0..1;}
	Surface playsRole firstSurface {multiplicity 0..1;}
}

relation SurfaceNextSurface {
	Surface playsRole next {multiplicity 0..1;}
	Surface playsRole prev {multiplicity 0..1;}
}

class TextPortion {
	String xmlId;
}

relation FragmentHasTextPortion {
	Fragment playsRole fragment {multiplicity 0..1;}
	TextPortion playsRole textPortion {multiplicity 0..1;}
}

relation PhysNoteRefersTextPortion {
	PhysNote playsRole physNote {multiplicity 0..*;}
	TextPortion playsRole textPortion {multiplicity 0..*;} 
}

class Rend {
	Rendition rend;
}

relation TextPortionHasRend {
	TextPortion playsRole text {multiplicity 0..1;}
	Rend playsRole rend {multiplicity 0..*;}
}

class RdgText extends TextPortion {
	VariationType type;
}

relation TextPortionHasNextTextPortion {
	TextPortion playsRole prevText {multiplicity 0..1;}
	TextPortion playsRole nextText {multiplicity 0..1;}
}

relation TextPortionContainsTextPortion {
	TextPortion playsRole childText {multiplicity 0..*;}
	TextPortion playsRole parentText {multiplicity 0..1;}
}

relation TextPortionContainsFirstTextPortion {
	TextPortion playsRole firstChildText {multiplicity 0..1;}
	TextPortion playsRole parentOfFirstText {multiplicity 0..1;}
}

relation TextPortionContainsLastTextPortion {
	TextPortion playsRole lastChildText {multiplicity 0..1;}
	TextPortion playsRole parentOfLastText {multiplicity 0..1;}
}

class RdgGrpText extends TextPortion {
  VariationType type;
}

class AppText extends TextPortion {
  VariationType type;
}

relation FragInterHasRdgTexts {
	FragInter playsRole fragInters {multiplicity 0..*;}
	RdgText playsRole rdg {multiplicity 0..*;}
}

class SimpleText extends TextPortion {
	String value;
}

class SegText extends TextPortion;

class AltText extends TextPortion {
	AltMode mode;
}

class AltTextWeight {
	double weight;
}

relation AltTextHasAltTextWeight {
	AltText playsRole altText {multiplicity 0..1;}
	AltTextWeight playsRole altTextWeight {multiplicity 0..*;}
}


relation AltTexWeightHasSegText {
	AltTextWeight playsRole altTextWeight {multiplicity 0..1;}
	SegText playsRole segText {multiplicity 0..1;}
}

class LbText extends TextPortion {
	Boolean breakWord;
	Boolean hyphenated;
}

relation LbTextHasFragInters {
	LbText playsRole lbText {multiplicity 0..*;}
	FragInter playsRole fragInter {multiplicity 0..*;}
}

class PbText extends TextPortion {
	int order;
}

relation PbTextHasFragInters {
	PbText playsRole pbText {multiplicity 0..*;}
	FragInter playsRole fragInter {multiplicity 0..*;}
}

relation PbTextSurface {
	PbText playsRole pbText {multiplicity 0..*;}
	Surface playsRole surface {multiplicity 0..1;}
}

class SpaceText extends TextPortion {
	SpaceDim dim;
	int quantity;
	SpaceUnit unit;
}

class ParagraphText extends TextPortion {
}

class AddText extends TextPortion {
	Place place;
}

class DelText extends TextPortion {
	HowDel how;
}

class SubstText extends TextPortion {
}

class GapText extends TextPortion {
	GapReason reason;
	GapUnit unit;
	int extent;
} 

class UnclearText extends TextPortion {
	UnclearReason reason;
}

class NoteText extends TextPortion {
	NoteType type;
}

relation AnnexNoteHasTextNote {
	AnnexNote playsRole annexNote {multiplicity 0..*;}
	NoteText playsRole noteText {multiplicity 1..1;}
}

class RefText extends TextPortion {
	String target;
	RefType type;
}

relation RefText2Surface {
	Surface playsRole surface {multiplicity 0..1;}
	RefText playsRole refText {multiplicity 0..*;}
}

relation RefText2FragInter {
	FragInter playsRole fragInter {multiplicity 0..1;}
	RefText playsRole refText {multiplicity 0..*;}
}

relation RefText2Fragment {
	Fragment playsRole refFrag {multiplicity 0..1;}
	RefText playsRole refText {multiplicity 0..*;}
}

class Annotation {
	String quote;
	String text;
}

relation AnnotationHasBeginSimpleText {
	Annotation playsRole startAnnotations {multiplicity 0..*;}
	SimpleText playsRole startText {multiplicity 1..1;}
}

relation AnnotationHasEndSimpleText {
	Annotation playsRole endAnnotations {multiplicity 0..*;}
	SimpleText playsRole endText {multiplicity 1..1;}
}

relation FragInterHasAnnotations {
  FragInter playsRole fragInter {multiplicity 1..1;}
  Annotation playsRole annotation {multiplicity 0..*;}
}

relation LdoDUserWritesAnnotations {
	LdoDUser playsRole user {multiplicity 1..1;}
	Annotation playsRole annotation {multiplicity 0..*;}
}

class Range {
  String start;
  int startOffset;
  String end;
  int endOffset;
}	

relation AnnotationHasRanges {
  Annotation playsRole annotation {multiplicity 1..1;}
  Range playsRole range {multiplicity 0..*;}
}

relation AnnotationsAndTagInTextPortion {
  Annotation playsRole annotation {multiplicity 1..*;}
  UserTagInTextPortion playsRole userTagInTextPortion {multiplicity 0..*;}
}

class RecommendationWeights {
	double editionWeight;
	double heteronymWeight;
	double dateWeight;
	double manuscriptWeight;
	double typescriptWeight;
	double publicationWeight;
	double textWeight;
}

relation LdoDUserHasRecommendationWeights {
	LdoDUser playsRole user {multiplicity 1..1;}
	RecommendationWeights playsRole recommendationWeights {multiplicity 0..*;}
}

relation VirtualEditionHasRecommendationWeights {
	VirtualEdition playsRole virtualEdition {multiplicity 1..1;}
	RecommendationWeights playsRole recommendationWeights {multiplicity 0..*;}
}

class TaxonomyWeight{
	double weight;
}

relation RecommendationWeightsHasTaxonomyWeight {
	RecommendationWeights playsRole recommendationsWeights {multiplicity 1..1;}
	TaxonomyWeight playsRole taxonomyWeight {multiplicity 0..*;}
}

relation TaxonomyHasTaxonomyWeight {
	Taxonomy playsRole taxonomy {multiplicity 1..1;}
	TaxonomyWeight playsRole taxonomyWeight {multiplicity 0..*;}
}

class Section {
	String title;
	int number;
}

relation VirtualEditionHasSections {
	VirtualEdition playsRole virtualEdition {multiplicity 0..1;}
	Section playsRole sections {multiplicity 1..*;}
}

relation SectionHasSections{
	Section playsRole parentSection {multiplicity 0..1;}
	Section playsRole subSections {multiplicity 0..*;}
}

relation SectionHasVitualEditionInters{
	Section playsRole section {multiplicity 1..1;}
	VirtualEditionInter playsRole VirtualEditionInter {multiplicity 0..*;}
}