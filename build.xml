<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="compile-sources" name="edition">
	<description>Edition Build File</description>

    <!-- The project configuration properties -->
    <property file="build.properties"/>
    <!-- User configuration properties - used if not alread defined at project level -->
    <property file="${user.home}/build.properties"/>
    <!-- Environment properties - used if not defined yet -->
    <property environment="env" />
	<!-- Configure path to GWT SDK -->
	<property name="gwt.sdk" location="${env.GWT_HOME}" />
	<property name="gwt.args" value="" />


	<property name="application.name" value="${ant.project.name}" />
    <property name="javac.encoding" value="UTF-8" />
    <property name="java.file.encoding" value="UTF-8" />
	
    <!-- Main directories-->
	<property name="src.rel-dir" value="src/main" />
	<property name="test.src.rel-dir" value="src/test"/>
	<property name="build.rel-dir" value="build" />
	<property name="lib.rel-dir" value="lib" />
	<property name="db.rel-dir" value="db"/>
	<property name="test-db.rel-dir" value="test-db"/>
	<property name="eclipse.build.rel-dir" value="bin"/>
		
    <!-- Directories with the source, e.g. java, dml, webapps -->
	<property name="java.src.rel-dir" value="${src.rel-dir}/java" />
	<property name="java.test.src.rel-dir" value="${test.src.rel-dir}/java"/>
	<property name="dml.src.rel-dir" value="${src.rel-dir}/dml" />
	<property name="config.src.rel-dir" value="${src.rel-dir}/config"/>
	<property name="webapp.src.rel-dir" value="${src.rel-dir}/webapp"/>
	
    <!-- DML files -->
	<property name="dml.filename" value="${application.name}.dml" />
	<property name="dml.rel-file" value="${dml.src.rel-dir}/${dml.filename}" />
	
	<!-- Directories with generated source -->
	<property name="generated-src.build.rel-dir" value="${build.rel-dir}/generated-sources" />
    
    <!-- Directories with the .class, .e.g used to build the wars -->
	<property name="classes.build.rel-dir" value="${build.rel-dir}/classes" />
	<property name="dml.build.rel-dir" value="${build.rel-dir}/src/main/dml" />
	<property name="war.build.rel-dir" value="${build.rel-dir}/war"/>
	<property name="classes.war.build.rel-dir" value="${war.build.rel-dir}/WEB-INF/classes"/>
	<property name="lib.war.build.rel-dir" value="${war.build.rel-dir}/WEB-INF/lib"/>
	
	<!-- User specific properties files files -->
	<property name="build.properties.filename" value="build.properties" />
	<property name="build.properties.rel-dir" value="${config.src.rel-dir}/${build.properties.filename}"/>
	
	<property file="${build.properties.rel-dir}" />
	
	<!-- Project Classpath -->
	<path id="project.class.path">
		<pathelement location="${classes.build.rel-dir}" />
		<pathelement location="${gwt.sdk}/gwt-user.jar"/>
		<fileset dir="${gwt.sdk}" includes="gwt-dev*.jar"/>
		<fileset dir="${lib.rel-dir}">
			<include name="**/*.jar" />
		</fileset>
		<!-- do not copy lib to avoid copying all files in development mode, the above instruction should be used instead for external deployments
		<fileset dir="war/WEB-INF/lib" includes="**/*.jar"/>
		-->
	</path>
			
	<taskdef resource="pt/ist/fenixframework/dml-ant.xml" classpathref="project.class.path" />
	
	<!-- Generate domain -->
	<target name="generate-domain">
		<echo message="Generating base domain classes..." />
		<echo message="Using: ${dml.rel-file}" />
		<dml-domain-generator destDirectory="${java.src.rel-dir}" destDirectoryBase="${generated-src.build.rel-dir}">
			<fileset file="${dml.rel-file}" />
		</dml-domain-generator>
	</target>
	
	<!-- Compile sources -->
	<target name="compile-sources" depends="generate-domain">
		<copy todir="${classes.war.build.rel-dir}">
	    	<fileset dir="${dml.src.rel-dir}" includes="**/*.dml"/>
	    </copy>
	    <copy todir="${war.build.rel-dir}">
	      	<fileset dir="${webapp.src.rel-dir}"/>
	    </copy>
	    <copy todir="${lib.war.build.rel-dir}">
	      	<fileset dir="${lib.rel-dir}"/>
	    </copy>
	    <mkdir dir="${classes.build.rel-dir}" />
	    <javac destdir="${classes.build.rel-dir}" debug="true" debuglevel="lines,vars,source"
	           encoding="${javac.encoding}" source="1.6" target="1.6"
	           optimize="true" deprecation="true" verbose="false" includeantruntime="false">
	      <classpath refid="project.class.path" />
	      <src>
	        	<pathelement path="${generated-src.build.rel-dir}:${java.src.rel-dir}"/>
	      </src>
	      <compilerarg line=""/>
	    </javac>
	</target>
	
	<!-- Instrument Classes -->
	<target name="instrument-classes" depends="compile-sources">
		<echo message="Injecting FenixFramework Voodoo Magic..." />
	    <copy file="${dml.rel-file}" todir="${classes.build.rel-dir}"/>
		<dml-post-processor dir="${classes.build.rel-dir}">
			<fileset file="${dml.rel-file}" />
			<classpath refid="project.class.path" />
		</dml-post-processor>
	</target>
	
	<!-- Compile Tests -->
	<target name="compile-tests" depends="instrument-classes" description="Compile the tests">
		<javac destdir="${classes.build.rel-dir}" source ="1.6" debug="true" debuglevel="lines,vars,source" optimize="true" deprecation="true" verbose="false" includeantruntime="false" encoding="${javac.encoding}">
	      <classpath refid="project.class.path" />
	      <src>
	        <pathelement path="${java.test.src.rel-dir}"/>
	      </src>
		</javac>
	</target>
		
	<!-- Run GWT interface in production mode -->
	<target name="gwtc" depends="compile-sources" description="GWT compile to JavaScript (production mode)">
	    <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
	      <classpath>
	        <pathelement location="${java.src.rel-dir}"/>
	        <path refid="project.class.path"/>
	      </classpath>
	      <!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
	      <jvmarg value="-Xmx256M"/>
	      <arg line="-war"/>
	      <arg value="${war.build.rel-dir}"/>
	      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
	      <arg line="${gwt.args}"/>
	      <arg value="pt.ist.socialsoftware.edition.presentation.LdoD"/>
	    </java>
	</target>	
		
	<!-- Run GWT interface in development mode -->	
	 <target name="devmode" depends="clean-all,compile-sources,instrument-classes" description="Run development mode">
	    <mkdir dir="${classes.war.build.rel-dir}" />
	    <copy todir="${classes.war.build.rel-dir}">
	      <fileset dir="${classes.build.rel-dir}" includes="**/*.class"/>
	    </copy>
	    <copy todir="${classes.war.build.rel-dir}">
	      <fileset dir="${java.src.rel-dir}" excludes="**/*.java"/>
	    </copy>
	    <java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
	      <classpath>
	        <pathelement location="${java.src.rel-dir}"/>
	        <path refid="project.class.path"/>
	      </classpath>
	      <jvmarg value="-Xmx256M"/>
	      <arg value="-startupUrl"/>
	      <arg value="index.html"/>
	      <arg line="-war"/>
	      <arg value="${war.build.rel-dir}"/>
	      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
	      <arg line="${gwt.args}"/>
	      <arg value="pt.ist.socialsoftware.edition.presentation.LdoD"/>
	    </java>
	  </target>

	<!-- Build the project -->
	<target name="build" depends="gwtc" description="Build this project" />

	<!-- Create a war file -->
	  <target name="war" depends="compile-sources,instrument-classes" description="Create a war file">
	    <mkdir dir="${classes.war.build.rel-dir}" />
	    <copy todir="${classes.war.build.rel-dir}">
	      <fileset dir="${classes.build.rel-dir}" includes="**/*.class"/>
	    </copy>
	    <copy todir="${classes.war.build.rel-dir}">
	      <fileset dir="${java.src.rel-dir}" excludes="**/*.java"/>
	    </copy>
	    <zip destfile="${build.rel-dir}/edition.war" basedir="${war.build.rel-dir}"/>
	  </target>

	
	<!-- Clean all -->
	<target name="clean-all" description="Cleans the compiled classes and generated sources">
	    <delete dir="${build.rel-dir}" failonerror="false" />
		<delete dir="${eclipse.build.rel-dir}" />
		<delete dir="${test-db.rel-dir}"/>
		<delete dir="${db.rel-dir}"/>
	</target>
	
	<!-- Clean -->
	<target name="clean-test" description="Cleans the compiled classes and generated sources">
		<delete dir="${test-db.rel-dir}"/>
	</target>
		
	<!-- Test All -->
	<target name="test:all" depends="compile-tests, test:loaders, test:services" description="Run the tests">
		<echo message="Testing al" />
	</target>

	<!-- Test Loaders -->
	<target name="test:loaders" depends="compile-tests" description="Run the tests">
		<echo message="Testing loaders" />
		<junit fork="yes">
			<jvmarg value="-Dfile.encoding=UTF-8"/>
			<classpath refid="project.class.path" />
			<formatter type="brief" usefile="false" />
			<assertions><enable/></assertions>
			<test name="pt.ist.socialsoftware.edition.loaders.ImportLdoDFromTEITest" />
		</junit>
	</target>
	
	<!-- Test Services -->
	<target name="test:services" depends="compile-tests" description="Run the tests">
		<echo message="Testing services" />
		<junit fork="yes">
			<jvmarg value="-Dfile.encoding=UTF-8"/>
			<classpath refid="project.class.path" />
			<formatter type="brief" usefile="false" />
			<assertions><enable/></assertions>
			<test name="pt.ist.socialsoftware.edition.services.PlainTransByInterTest" />
		</junit>
	</target>
	
			
</project>